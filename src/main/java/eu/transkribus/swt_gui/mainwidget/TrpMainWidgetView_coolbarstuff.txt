package org.dea.transcript.trp.gui.mainwidget;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.lang3.tuple.Pair;
import org.dea.swt.canvas.CanvasMode;
import org.dea.swt.canvas.CanvasToolBar;
import org.dea.swt.canvas.shapes.CanvasShapeType;
import org.dea.swt.pagingtoolbar.PagingToolBar;
import org.dea.swt.portal.PortalWidget;
import org.dea.swt.portal.PortalWidget.Docking;
import org.dea.swt.portal.PortalWidget.Position;
import org.dea.swt.util.DropDownToolItem;
import org.dea.swt.util.Images;
import org.dea.swt.util.SWTUtil;
import org.dea.swt.util.ThumbnailWidget;
import org.dea.swt.util.databinding.DataBinder;
import org.dea.transcript.trp.gui.TrpConfig;
import org.dea.transcript.trp.gui.canvas.TrpCanvasAddMode;
import org.dea.transcript.trp.gui.canvas.TrpCanvasWidget;
import org.dea.transcript.trp.gui.canvas.TrpSWTCanvas;
import org.dea.transcript.trp.gui.dialogs.SettingsDialog;
import org.dea.transcript.trp.gui.doc_overview.DocOverviewWidget;
import org.dea.transcript.trp.gui.job_overview.JobOverviewWidget;
import org.dea.transcript.trp.gui.layoutanalysis.ToolsWidget;
import org.dea.transcript.trp.gui.menubar.MenuListener;
import org.dea.transcript.trp.gui.menubar.TrpMenuBar;
import org.dea.transcript.trp.gui.page_metadata.PageMetadataWidget;
import org.dea.transcript.trp.gui.structure_tree.StructureTreeWidget;
import org.dea.transcript.trp.gui.transcription.ATranscriptionWidget;
import org.dea.transcript.trp.gui.transcription.ATranscriptionWidget.Type;
import org.dea.transcript.trp.gui.transcription.LineTranscriptionWidget;
import org.dea.transcript.trp.gui.transcription.WordTranscriptionWidget;
import org.dea.transcript.trp.gui.versions.VersionsWidget;
import org.dea.transcript.trp.gui.vkeyboards.TrpVirtualKeyboards;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.MenuEvent;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.CoolBar;
import org.eclipse.swt.widgets.CoolItem;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.LabelToolItem;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.Monitor;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.ToolBar;
import org.eclipse.swt.widgets.ToolItem;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CopyOfTrpMainWidgetView extends Composite {
	private final static Logger logger = LoggerFactory.getLogger(CopyOfTrpMainWidgetView.class);
		
	public final String APP_NAME;
	public final String HELP_TEXT;
	final static boolean ADD_STATUS_LABEL = false;

	// ##### Widgets and other stuff: #####
	TrpCanvasWidget canvasWidget;
	PagingToolBar pagesPagingToolBar;
	GridData toolBarGridData;
	LineTranscriptionWidget lineTranscriptionWidget;
	WordTranscriptionWidget wordTranscriptionWidget;
	StructureTreeWidget structureTreeWidget;
	DocOverviewWidget docOverviewWidget;
	JobOverviewWidget jobOverviewWidget;
	VersionsWidget versionsWidget;
//	JobsAndVersionsView jobsAndVersionView;
	PageMetadataWidget metadataWidget;
	TrpVirtualKeyboards vkeyboards;
	ToolsWidget laWidget;
	ThumbnailWidget thumbnailWidget;
//	Label currentUserLabel; // currently unused
	
	TrpSettings trpSets;
	PortalWidget portalWidget;
	Label status;
	TrpMenuBar menu;
	MenuListener menuListener;	
	// ##########
	
	// ##### Toolbar stuff: #####
	DropDownToolItem transcriptsComboItem;
	ToolItem menuButton, loginToggle, reloadDocumentButton, exportDocumentButton, exportPdfButton, exportTeiButton, exportRtfButton, openLocalFolderButton, closeDocBtn;
	ToolItem saveTranscriptButton, saveTranscriptAlwaysButton, reloadTranscriptsButton;
	
	DropDownToolItem leftViewDockingDropItem, rightViewDockingDropItem, bottomViewDockingDropItem;
	HashMap<Position, DropDownToolItem> dockingToolItems = new HashMap<>();
	
	ToolItem leftViewVisibleToggle;
	ToolItem rightViewVisibleToggle;
	ToolItem bottomViewVisibleToggle;
	
	ToolItem showPrintSpaceToggle, showRegionsToggle, showLinesToggle, showBaselinesToggle, showWordsToggle;
	ToolItem showLineEditorToggle;
	ToolItem loadTranscriptInTextEditor;
	ToolItem sendBugReportButton;
	// ##########
	
	// ##### Tab folders stuff: #####
	TabFolder leftTabFolder;
	TabFolder rightTabFolder;
//	TabFolder transcriptionTabFolder;
	Composite transcriptionWidgetContainer;
	
	// left tab-items:
	TabItem docoverviewItem;
	TabItem structureItem;
	TabItem jobOverviewItem;
	TabItem versionsItem, thumbnailItem;

	// right tab-items:
	TabItem metadataItem, vkeyboardsItem, laItem;

	// bottom tab-items:
//	TabItem lineTranscriptionItem;
//	TabItem wordTranscriptionItem;
//	TabItem wordGraphEditorItem;
	// ##########
	
	CoolBar cb;
	List<Pair<ToolBar, CoolItem> > toolbars;
		
	public CopyOfTrpMainWidgetView(Composite parent, TrpMainWidget mainWidget) {
		super(parent, SWT.NONE);
		getShell().setMinimumSize(new Point(0, 0));
		APP_NAME = mainWidget.NAME+" v"+mainWidget.VERSION+" ("+mainWidget.info.getTimestampString()+")";
		HELP_TEXT = mainWidget.info.getHelptext();
				
		init(mainWidget);
		initSize();
	}
	
	public TabFolder getRightTabFolder() { return rightTabFolder; }
	
	private void initSize() {
		Rectangle b = getShell().getDisplay().getPrimaryMonitor().getBounds();
		
		float frac = 0.90f;
		
		getShell().setSize((int)(b.width*frac), (int)(b.height*frac));
		center();
	}
	
	public TreeViewer getStructureTreeViewer() { return structureTreeWidget.getTreeViewer(); }
	
	private void init(TrpMainWidget mainWidget) {
		initSettings();
		
//		progressDialog = new ProgressMonitorDialog(getShell());
		
		setToolTipText("An interactive adaptive transcription platform");
		getShell().setText(APP_NAME);
		getShell().setImage(Images.getOrLoad("/icons/pencil.png"));
//		getShell().setImage(Images.getOrLoad("/wolpertinger_small_64.png"));
//		setSize(1200, 850);
//		setLayout(new FillLayout());
		setLayout(new GridLayout(2, false));
		
		// menu:
		menu = new TrpMenuBar(this);
//		getShell().setMenuBar(menu.getMenuBar());		

		// toolbar:
		initToolBar();

		if (ADD_STATUS_LABEL) {
		status = new Label(this, /*SWT.BORDER |*/ SWT.RIGHT);
		status.setImage(null);
		status.setLayoutData(new GridData(SWT.RIGHT, SWT.BOTTOM, true, false, 1, 1));
		setStatusMessage("Welcome to "+APP_NAME+"!", 5000);
		}
		
		// center widget (canvas):
		canvasWidget = new TrpCanvasWidget(SWTUtil.dummyShell, SWT.NONE, mainWidget);
		
		// current user label:
//		if (true) {
//		currentUserLabel = new Label(SWTUtil.dummyShell, SWT.TOP);
//		currentUserLabel.setText("");
//		currentUserLabel.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false, 1, 1));
//		}
		
		// ####### LEFT TAB FOLDER: #######
		if (true) {
		leftTabFolder = new TabFolder(SWTUtil.dummyShell, SWT.NONE);
		leftTabFolder.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		
		docOverviewWidget = new DocOverviewWidget(leftTabFolder);
		structureTreeWidget = new StructureTreeWidget(leftTabFolder);
		jobOverviewWidget = new JobOverviewWidget(leftTabFolder, SWT.NONE);
		versionsWidget = new VersionsWidget(leftTabFolder, SWT.NONE);
		thumbnailWidget = new ThumbnailWidget(leftTabFolder, SWT.NONE);
		
		docoverviewItem = createTabItem(leftTabFolder, docOverviewWidget, "Documents");
		structureItem = createTabItem(leftTabFolder, structureTreeWidget, "Structure");
		jobOverviewItem = createTabItem(leftTabFolder, jobOverviewWidget, "Jobs");
		versionsItem = createTabItem(leftTabFolder, versionsWidget, "Versions");
		thumbnailItem = createTabItem(leftTabFolder, thumbnailWidget, "Pages");
		
		selectStructureTab();
		}
		
		// the right widget (page metadata, virtual keyboard):
		if (true) {
			rightTabFolder = new TabFolder(SWTUtil.dummyShell, SWT.TOP);
			rightTabFolder.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
			
			metadataWidget = new PageMetadataWidget(rightTabFolder, SWT.FILL);
			vkeyboards = new TrpVirtualKeyboards(rightTabFolder, SWT.TOP);
			laWidget = new ToolsWidget(rightTabFolder, SWT.TOP);
			
			metadataItem = createTabItem(rightTabFolder, metadataWidget, "Metadata");
			laItem = createTabItem(rightTabFolder, laWidget, "Tools");
			vkeyboardsItem = createTabItem(rightTabFolder, vkeyboards, "Virtual Keyboards");
		}

		// the bottom widget (transcription):
		if (true) {
//			transcriptionWidgetContainer = new TabFolder(SWTUtil.dummyShell, SWT.NONE);
		transcriptionWidgetContainer = new Composite(SWTUtil.dummyShell, SWT.NONE);
		transcriptionWidgetContainer.setLayout(new GridLayout(1, true));
		transcriptionWidgetContainer.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		
		lineTranscriptionWidget = new LineTranscriptionWidget(SWTUtil.dummyShell, SWT.NONE, trpSets, this);
		lineTranscriptionWidget.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		wordTranscriptionWidget = new WordTranscriptionWidget(SWTUtil.dummyShell, SWT.NONE, trpSets, this);
		wordTranscriptionWidget.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
				
//		lineTranscriptionItem = createTabItem(transcriptionTabFolder, lineTranscriptionWidget, "Line based correction");
//		wordTranscriptionItem = createTabItem(transcriptionTabFolder, wordTranscriptionWidget, "Word based correction");
		}
		changeToTranscriptionWidget(Type.LINE_BASED);
		
//		Composite child = new Composite(SWTUtil.dummyShell, SWT.NONE);
//	    child.setLayout(new FillLayout());
//
//	    // Create the buttons
//	    new Button(child, SWT.PUSH).setText("One");
//	    new Button(child, SWT.PUSH).setText("Two");
				
		// init portal widget:
		portalWidget = new PortalWidget(this, SWT.NONE, null, canvasWidget, leftTabFolder, transcriptionWidgetContainer, rightTabFolder);
		portalWidget.setMinWidthOfWidget(Position.LEFT, 200);
		portalWidget.setMinWidthOfWidget(Position.CENTER, 400);
		portalWidget.setMinWidthOfWidget(Position.BOTTOM, 400);
		portalWidget.setMinWidthOfWidget(Position.RIGHT, 300);
		
		addInternalListener();
		addBindings();
		updateLoginInfo(false, "", "");
		
		pack();
	}
	
	public void changeToTranscriptionWidget(ATranscriptionWidget.Type type) {
		logger.debug("changing to tr-widget: "+type);
		boolean changed=false;
		
		if (type == ATranscriptionWidget.Type.LINE_BASED) {
			changed=true;
//			lineTranscriptionWidget.getTranscriptionTypeItem().clearSelections();
			lineTranscriptionWidget.getTranscriptionTypeItem().selectItem(0, false);
			
			lineTranscriptionWidget.setParent(transcriptionWidgetContainer);
			wordTranscriptionWidget.setParent(SWTUtil.dummyShell);
			
//			lineTranscriptionWidget.updateToolbarSize();
			
		} else if (type == ATranscriptionWidget.Type.WORD_BASED) {
			changed=true;
//			wordTranscriptionWidget.getTranscriptionTypeItem().clearSelections();
			wordTranscriptionWidget.getTranscriptionTypeItem().selectItem(1, false);
			
			lineTranscriptionWidget.setParent(SWTUtil.dummyShell);
			wordTranscriptionWidget.setParent(transcriptionWidgetContainer);
			
//			wordTranscriptionWidget.updateToolbarSize();
		}
		
		if (changed) {
//			lineTranscriptionWidget.pack();
//			wordTranscriptionWidget.pack();
			transcriptionWidgetContainer.layout(true);
		}
		
	}
	
	public void openViewSetsDialog() {
		SettingsDialog sd = new SettingsDialog(getShell(), /*SWT.PRIMARY_MODAL|*/ SWT.DIALOG_TRIM, getCanvas().getSettings(), getTrpSets());		
		sd.open();
	}
	
	private TabItem createTabItem(TabFolder tabFolder, Control control, String Text) {
		TabItem ti = new TabItem(tabFolder, SWT.NONE);
		ti.setText(Text);
		ti.setControl(control);
		return ti;
	}
	
	public void selectDocListTab() {
		leftTabFolder.setSelection(docoverviewItem);
	}
	
	public void selectStructureTab() {
		leftTabFolder.setSelection(structureItem);
	}
	
	public void selectJobListTab() {
		leftTabFolder.setSelection(jobOverviewItem);
	}
	
	public void setStatusMessage(String text, int time) {
		if (status==null)
			return;
		
		status.setText(text);
		status.pack();
		status.setSize(status.computeSize(SWT.DEFAULT, SWT.DEFAULT).x, 20);
		pagesPagingToolBar.getToolBar().pack();
	
		if (time <= 0) return;
		
		Display.getCurrent().timerExec(time, new Runnable() {
			@Override
			public void run() {
				logger.debug("deleting statusbar message!");
				status.setText("");
			}
		});
		
		
		
	}
	
//	private void updateStatusBarText(String text) {
//		if (text == null || text.isEmpty()) {
//			logger.debug("setting statusbar empty!");
//			status.setText(text);
//			status.setSize(0, 0);
////			status.setBounds(0, 0, 0, 0);
//			this.layout();
//		} else {
//			status.setText(text);
//			status.pack();
//			status.setSize(status.computeSize(SWT.DEFAULT, SWT.DEFAULT).x, 10);
//		}
//		
//		
//	}
	
	private void initSettings() {
		trpSets = new TrpSettings();
		TrpConfig.registerBean(trpSets);
	}
	
//	private void init(TrpSWTCanvas canvas) {
//		setToolTipText("An interactive adaptive transcription platform");
//		setText(APP_NAME);
//		setImage(Images.getOrLoad("/icons/pencil.png"));
////		setSize(1200, 850);
//		
//		setLayout(new GridLayout(2, false));
//		
//		// init canvas and canvas widget (first with dummyshell as parent -> is changed later)
////		canvas = new TrpSWTCanvas(SWTUtil.dummyShell, SWT.NONE);
//		this.canvas = canvas;
//		canvasWidget = new CanvasWidget(SWTUtil.dummyShell, SWT.NONE, canvas);
//		initAddShapeActionStuff();
//		
//		initToolBar();
//		
//		// INIT OTHER STUFF:		
//		sashForm = new SashForm(this, SWT.HORIZONTAL);
//		sashForm.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));
//		sashForm.setSashWidth(5);
//		
//		leftTabFolder = new TabFolder(sashForm, SWT.NONE);
////		leftTabFolder.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
//		docoverviewTreeItem = new TabItem(leftTabFolder, SWT.NONE);
//		docoverviewTreeItem.setText("Documents");
//		docOverviewWidget = new DocOverviewWidget(leftTabFolder);	
//		docoverviewTreeItem.setControl(docOverviewWidget);
//		
//		metadataTreeItem = new TabItem(leftTabFolder, SWT.NONE);
//		metadataTreeItem.setText("Metadata");
//		metadataEditor = new TrpDocMetadataEditor(leftTabFolder, SWT.NONE);
//		metadataTreeItem.setControl(metadataEditor);
//		
//		structureTreeItem = new TabItem(leftTabFolder, SWT.NONE);
//		structureTreeItem.setText("Structure");
//		structureTreeWidget = new StructureTreeWidget(leftTabFolder);
//		structureTreeItem.setControl(structureTreeWidget);
//
//				
//		sashForm_1 = new SashForm(sashForm, SWT.VERTICAL);
//		sashForm_1.setSashWidth(5);		
//		
////		ScrolledComposite sc = new ScrolledComposite(sashForm_1, SWT.H_SCROLL | SWT.V_SCROLL);
////		sc.setMinSize(0, 0);
////		sc.setExpandHorizontal(true);
////		sc.setExpandVertical(true);
//////		canvasWidget.setLayout(new FillLayout());
////		canvasWidget.setParent(sc);
////		sc.setContent(canvasWidget);
//		
//		canvasWidget.setParent(sashForm_1);
//		
//		transcriptionTabFolder = new TabFolder(sashForm_1, SWT.NONE);
//		
//		textTranscriptionItem = new TabItem(transcriptionTabFolder, SWT.NONE);
//		textTranscriptionItem.setText("Transcription");
//		
//		trpTranscriptionWidget = new TrpTextTranscriptionWidget(transcriptionTabFolder, SWT.BORDER);
//		textTranscriptionItem.setControl(trpTranscriptionWidget);
//		
//		wordGraphEditorItem = new TabItem(transcriptionTabFolder, SWT.NONE);
//		wordGraphEditorItem.setText("Word Graph Editor");
//		
//		wordGraphEditor = new WordGraphEditor(transcriptionTabFolder, SWT.NONE);
//		wordGraphEditorItem.setControl(wordGraphEditor);
//		
//		sashForm_1.setWeights(DEFAULT_WEIGHTS_VERTICAL);
//		sashForm.setWeights(DEFAULT_WEIGHTS_HORIZONTAL);
//		
//		menu = new TrpMainWidgetMenuBar(this);
//		this.setMenuBar(menu.getMenuBar());
//		addInternalListener();
//		addBindings();
//		
//		setLeftViewVisible(viewSets.isShowLeftTabView());
//	}
	
	
	private ToolBar initHomeButtonToolItem() {
		final ToolBar toolBar = new ToolBar(cb, SWT.FLAT | SWT.WRAP | SWT.RIGHT);
		// open menu button:
		menuButton = new ToolItem(toolBar, SWT.CHECK);
		menuButton.setImage(Images.getOrLoad("/icons/house.png"));
		menuButton.setText("");
		menuButton.setToolTipText("Main Menu");
		menuButton.addSelectionListener(new SelectionAdapter() {
	        @Override
	        public void widgetSelected(SelectionEvent e) {
	                Point point = toolBar.toDisplay(new Point(menuButton.getBounds().x, menuButton.getBounds().y+menuButton.getBounds().height));
	                menu.getMenuBar().setLocation(point.x, point.y);
	                menu.getMenuBar().setVisible(true);
	        }
		});
		menu.getMenuBar().addMenuListener(new org.eclipse.swt.events.MenuListener() {
			@Override public void menuShown(MenuEvent e) {
				menuButton.setSelection(true);
			}
			@Override public void menuHidden(MenuEvent e) {
				menuButton.setSelection(false);
			}
		});	
		
		return toolBar;
	}
	
	private ToolBar initVariousToolItems() {
		final ToolBar toolBar = new ToolBar(cb, SWT.FLAT | SWT.WRAP | SWT.RIGHT);
		
		loginToggle = new ToolItem(toolBar, SWT.PUSH);
		loginToggle.setToolTipText("Login");
		loginToggle.setImage(Images.getOrLoad("/icons/disconnect.png"));
//		loginToggle.setImage(Images.getOrLoad("/icons/connect.png"));
		if (true) {
			class DockingSl extends SelectionAdapter {
				DropDownToolItem item;
				Position pos;
				
				public DockingSl(DropDownToolItem item, Position pos) {
					this.item = item;
					this.pos = pos;
				}
				
				@Override public void widgetSelected(SelectionEvent e) {
					logger.debug("selected: "+pos+", menu visible: "+item.isMenuVisible());
					
					if (e.detail == SWT.ARROW)
						return;
					if (item.isMenuVisible())
						return;
					
//					logger.debug("selected: "+e);
					switch (portalWidget.getDocking(pos)) {
					case DOCKED:
						portalWidget.setWidgetDockingType(pos, Docking.INVISIBLE);
						break;
					case UNDOCKED:
					case INVISIBLE:
						portalWidget.setWidgetDockingType(pos, Docking.DOCKED);
						break;					
					}		
				}
			};
			
			leftViewDockingDropItem = new DropDownToolItem(toolBar, false, true, SWT.RADIO);
			leftViewDockingDropItem.addItem("Docked", Images.APPLICATION_SIDE_CONTRACT, "Left view docking state: docked", false, Docking.DOCKED);
			leftViewDockingDropItem.addItem("Undocked", Images.APPLICATION_SIDE_CONTRACT, "Left view docking state: undocked", false, Docking.UNDOCKED);
			leftViewDockingDropItem.addItem("Invisible", Images.APPLICATION_SIDE_CONTRACT, "Left view docking state: invisible", false, Docking.INVISIBLE);
			dockingToolItems.put(Position.LEFT, leftViewDockingDropItem);
			leftViewDockingDropItem.selectItem(0, false);
//			leftViewDockingDropItem.ti.addSelectionListener(new DockingSl(leftViewDockingDropItem, Position.LEFT));
			
			rightViewDockingDropItem = new DropDownToolItem(toolBar, false, true, SWT.RADIO);
			rightViewDockingDropItem.addItem("Docked", Images.APPLICATION_SIDE_EXPAND, "Right view docking state: docked", false, Docking.DOCKED);
			rightViewDockingDropItem.addItem("Undocked", Images.APPLICATION_SIDE_EXPAND, "Right view docking state: undocked", false, Docking.UNDOCKED);
			rightViewDockingDropItem.addItem("Invisible", Images.APPLICATION_SIDE_EXPAND, "Right view docking state: invisible", false, Docking.INVISIBLE);
			dockingToolItems.put(Position.RIGHT, rightViewDockingDropItem);
			rightViewDockingDropItem.selectItem(0, false);
//			rightViewDockingDropItem.ti.addSelectionListener(new DockingSl(rightViewDockingDropItem, Position.RIGHT));
			
			bottomViewDockingDropItem = new DropDownToolItem(toolBar, false, true, SWT.RADIO);
			bottomViewDockingDropItem.addItem("Docked", Images.APPLICATION_SIDE_PUT, "Bottom view docking state: docked", false, Docking.DOCKED);
			bottomViewDockingDropItem.addItem("Undocked", Images.APPLICATION_SIDE_PUT, "Bottom view docking state: undocked", false, Docking.UNDOCKED);
			bottomViewDockingDropItem.addItem("Invisible", Images.APPLICATION_SIDE_PUT, "Bottom view docking state: invisible", false, Docking.INVISIBLE);
			dockingToolItems.put(Position.BOTTOM, bottomViewDockingDropItem);
			bottomViewDockingDropItem.selectItem(0, false);
//			bottomViewDockingDropItem.ti.addSelectionListener(new DockingSl(bottomViewDockingDropItem, Position.BOTTOM));
		}
		
		else {
		leftViewVisibleToggle = new ToolItem(toolBar, SWT.CHECK);
		leftViewVisibleToggle.setToolTipText("Show left view");
		leftViewVisibleToggle.setImage(Images.getOrLoad("/icons/application_side_contract.png"));
		
		rightViewVisibleToggle = new ToolItem(toolBar, SWT.CHECK);
		rightViewVisibleToggle.setToolTipText("Show right view");
		rightViewVisibleToggle.setImage(Images.getOrLoad("/icons/application_side_expand.png"));		
		
		bottomViewVisibleToggle = new ToolItem(toolBar, SWT.CHECK);
		bottomViewVisibleToggle.setToolTipText("Show bottom view");
		bottomViewVisibleToggle.setImage(Images.getOrLoad("/icons/application_put.png"));
		}
		
		openLocalFolderButton = new ToolItem(toolBar, SWT.PUSH);
		openLocalFolderButton.setToolTipText("Open local folder");
		openLocalFolderButton.setImage(Images.getOrLoad("/icons/folder.png"));
		
		closeDocBtn = new ToolItem(toolBar, SWT.PUSH);
		closeDocBtn.setToolTipText("Close document");
		closeDocBtn.setImage(Images.getOrLoad("/icons/cancel.png"));
		
		saveTranscriptButton = new ToolItem(toolBar, SWT.PUSH);
		saveTranscriptButton.setToolTipText("Save page");
		saveTranscriptButton.setImage(Images.getOrLoad("/icons/disk.png"));

//		saveTranscriptAlwaysButton = new ToolItem(toolBar, SWT.CHECK);
//		saveTranscriptAlwaysButton.setToolTipText("Save page always, i.e. on every change of the page - this means the page is also saved when no changes happened -> use this option with care!");
//		saveTranscriptAlwaysButton.setImage(Images.getOrLoad("/icons/disk_multiple.png"));
//		new ToolItem(toolBar, SWT.SEPARATOR);
		
		reloadDocumentButton = new ToolItem(toolBar, SWT.PUSH);
		reloadDocumentButton.setToolTipText("Reload document");
		reloadDocumentButton.setImage(Images.getOrLoad("/icons/refresh.gif"));
		
		exportDocumentButton = new ToolItem(toolBar, SWT.PUSH);
		exportDocumentButton.setToolTipText("Export document");
		exportDocumentButton.setImage(Images.getOrLoad("/icons/folder_go.png"));
		exportDocumentButton.setEnabled(false);
		
		exportPdfButton = new ToolItem(toolBar, SWT.PUSH);
		exportPdfButton.setToolTipText("Export document as PDF");
		exportPdfButton.setImage(Images.getOrLoad("/icons/page_white_acrobat.png"));
		exportPdfButton.setEnabled(false);
		
		exportTeiButton = new ToolItem(toolBar, SWT.PUSH);
		exportTeiButton.setToolTipText("Export document as TEI XML");
		exportTeiButton.setImage(Images.getOrLoad("/icons/page_white_code.png"));
		exportTeiButton.setEnabled(false);
		
		exportRtfButton = new ToolItem(toolBar, SWT.PUSH);
		exportRtfButton.setToolTipText("Export document as RTF");
		exportRtfButton.setImage(Images.getOrLoad("/icons/page_white_word.png"));
		exportRtfButton.setEnabled(false);
	
		return toolBar;
	}
	
	private ToolBar initPagingToolBar() {
//		final ToolBar toolBar = new ToolBar(cb, SWT.FLAT | SWT.WRAP | SWT.RIGHT);
		pagesPagingToolBar = new PagingToolBar("Page: ", false, cb, SWT.NONE);
		
		toolBarGridData = new GridData(SWT.FILL, SWT.TOP, true, false);
//		pagesPagingToolBar.setLayoutData(toolBarGridData);
		pagesPagingToolBar.getReloadBtn().setToolTipText("Reload page");
		
//		ToolbarToolItem tmpTi = new ToolbarToolItem(allToolBar, SWT.NONE, pagesPagingToolBar.getToolBar());
//		tmpTi.setControl(pagesPagingToolBar);
//		tmpTi.setWidth(pagesPagingToolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT).x);
//		pagesPagingToolBar.setDoublePageButtonsVisible(false);
//		transcriptsPagingToolBar = new PagingToolBar("Transcripts: ", false, this, SWT.NONE);
		
		loadTranscriptInTextEditor = new ToolItem(pagesPagingToolBar.getToolBar(), SWT.PUSH);
		loadTranscriptInTextEditor.setToolTipText("Open transcript source");
		loadTranscriptInTextEditor.setImage(Images.getOrLoad("/icons/script.png"));
		
		return pagesPagingToolBar.getToolBar();
	}
	
	private ToolBar initOtherToolbar() {
		final ToolBar toolBar = new ToolBar(cb, SWT.FLAT | SWT.WRAP | SWT.RIGHT);
		
		LabelToolItem trLabelItem = new LabelToolItem(toolBar, SWT.NONE);
		trLabelItem.setText("Versions: ");
				
//		ComboToolItem transcriptsComboItem = new ComboToolItem(toolBar, SWT.READ_ONLY);
//		ComboToolItem transcriptsComboItem = new ComboToolItem(toolBar, SWT.DROP_DOWN | SWT.READ_ONLY);
		transcriptsComboItem = new DropDownToolItem(toolBar, true, true, SWT.RADIO);
				
		reloadTranscriptsButton = new ToolItem(toolBar, SWT.PUSH);
		reloadTranscriptsButton.setImage(Images.getOrLoad("/icons/refresh.gif"));
		reloadTranscriptsButton.setToolTipText("Reload the list of transcripts");
		
		int preInsertIndex=0;
		
		showPrintSpaceToggle = new ToolItem(toolBar, SWT.CHECK);
		showPrintSpaceToggle.setToolTipText("Show printspace (F1)");
		showPrintSpaceToggle.setImage(Images.getOrLoad("/icons/show_ps_shape.png"));
		
		showRegionsToggle= new ToolItem(toolBar, SWT.CHECK);
		showRegionsToggle.setToolTipText("Show regions (F2)");
		showRegionsToggle.setImage(Images.getOrLoad("/icons/show_regions_shape.png"));
		
		showLinesToggle= new ToolItem(toolBar, SWT.CHECK);
		showLinesToggle.setToolTipText("Show lines (F3)");
		showLinesToggle.setImage(Images.getOrLoad("/icons/show_lines_shape.png"));
		
		showBaselinesToggle= new ToolItem(toolBar, SWT.CHECK);
		showBaselinesToggle.setToolTipText("Show baselines (F4)");
		showBaselinesToggle.setImage(Images.getOrLoad("/icons/show_baselines_shape.png"));
		
		showWordsToggle= new ToolItem(toolBar, SWT.CHECK);
		showWordsToggle.setToolTipText("Show words (F5)");
		showWordsToggle.setImage(Images.getOrLoad("/icons/show_word_shape.png"));
		
		if (TrpSettings.ENABLE_LINE_EDITOR) {
			new ToolItem(toolBar, SWT.SEPARATOR);			
			showLineEditorToggle = new ToolItem(toolBar, SWT.CHECK);
			showLineEditorToggle.setImage(Images.getOrLoad("/icons/pencil.png"));
			showLineEditorToggle.setToolTipText("Show line transcription editor");
		}
		
		new ToolItem(toolBar, SWT.SEPARATOR);
		sendBugReportButton = new ToolItem(toolBar, SWT.PUSH);
		sendBugReportButton.setImage(Images.getOrLoad("/icons/bug.png"));
		sendBugReportButton.setToolTipText("Send a bug report / feature request");
		
		return toolBar;
	}
	
	private void initToolBar() {
		cb = new CoolBar(this, SWT.FLAT | SWT.HORIZONTAL);
//		cbItem = new CoolItem(cb, SWT.DROP_DOWN);
		
		// init items:
		toolbars = new ArrayList<>();
		ToolBar t1 = initHomeButtonToolItem();
		ToolBar t2 = initVariousToolItems();
		ToolBar t3 = initPagingToolBar();
		ToolBar t4 = initOtherToolbar();
		
		toolbars.add(Pair.of(t1, new CoolItem(cb, SWT.NONE)));
		toolbars.add(Pair.of(t2, new CoolItem(cb, SWT.NONE)));
		toolbars.add(Pair.of(t3, new CoolItem(cb, SWT.NONE)));
		toolbars.add(Pair.of(t4, new CoolItem(cb, SWT.NONE)));
		
		for (Pair<ToolBar, CoolItem> t : toolbars) {
			t.getRight().setControl(t.getLeft());
		}
		
		/////////////////////////////////
		getShell().addListener(SWT.Resize, new Listener() {
		      @Override
			public void handleEvent(Event e) {
		    	  updateToolBarSize();
		      }
		    });
				
		updateToolBarSize();
	}
	
//	private void initToolBar() {
//		cb = new CoolBar(this, SWT.NONE);
//		cbItem = new CoolItem(cb, SWT.DROP_DOWN);
//		
//		pagesPagingToolBar = new PagingToolBar("Page: ", false, cb, SWT.NONE);
//		
//		toolBarGridData = new GridData(SWT.FILL, SWT.TOP, true, false);
////		pagesPagingToolBar.setLayoutData(toolBarGridData);
//		pagesPagingToolBar.getReloadBtn().setToolTipText("Reload page");
//		
////		ToolbarToolItem tmpTi = new ToolbarToolItem(allToolBar, SWT.NONE, pagesPagingToolBar.getToolBar());
////		tmpTi.setControl(pagesPagingToolBar);
////		tmpTi.setWidth(pagesPagingToolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT).x);
////		pagesPagingToolBar.setDoublePageButtonsVisible(false);
////		transcriptsPagingToolBar = new PagingToolBar("Transcripts: ", false, this, SWT.NONE);
//		
//		final ToolBar toolBar = pagesPagingToolBar.getToolBar();
//		
//		loadTranscriptInTextEditor = new ToolItem(toolBar, SWT.PUSH);
//		loadTranscriptInTextEditor.setToolTipText("Open transcript source");
//		loadTranscriptInTextEditor.setImage(Images.getOrLoad("/icons/script.png"));
//		
//		ToolItem sep1 = new ToolItem(toolBar, SWT.SEPARATOR);
//		
//		LabelToolItem trLabelItem = new LabelToolItem(toolBar, SWT.NONE);
//		trLabelItem.setText("Versions: ");
//				
////		ComboToolItem transcriptsComboItem = new ComboToolItem(toolBar, SWT.READ_ONLY);
////		ComboToolItem transcriptsComboItem = new ComboToolItem(toolBar, SWT.DROP_DOWN | SWT.READ_ONLY);
//		transcriptsComboItem = new DropDownToolItem(toolBar, true, true, SWT.RADIO);
//				
//		reloadTranscriptsButton = new ToolItem(toolBar, SWT.PUSH);
//		reloadTranscriptsButton.setImage(Images.getOrLoad("/icons/refresh.gif"));
//		reloadTranscriptsButton.setToolTipText("Reload the list of transcripts");
//		
//		
//		int preInsertIndex=0;
//		
//		// open menu button:
//		menuButton = new ToolItem(toolBar, SWT.CHECK, preInsertIndex++);
//		menuButton.setImage(Images.getOrLoad("/icons/house.png"));
//		menuButton.setText("");
//		menuButton.setToolTipText("Main Menu");
//		menuButton.addSelectionListener(new SelectionAdapter() {
//	        @Override
//	        public void widgetSelected(SelectionEvent e) {
//	                Point point = toolBar.toDisplay(new Point(menuButton.getBounds().x, menuButton.getBounds().y+menuButton.getBounds().height));
//	                menu.getMenuBar().setLocation(point.x, point.y);
//	                menu.getMenuBar().setVisible(true);
//	        }
//		});
//		menu.getMenuBar().addMenuListener(new org.eclipse.swt.events.MenuListener() {
//			@Override public void menuShown(MenuEvent e) {
//				menuButton.setSelection(true);
//			}
//			@Override public void menuHidden(MenuEvent e) {
//				menuButton.setSelection(false);
//			}
//		});		
//		
//		new ToolItem(toolBar, SWT.SEPARATOR, preInsertIndex++);
//		
//		loginToggle = new ToolItem(toolBar, SWT.PUSH, preInsertIndex++);
//		loginToggle.setToolTipText("Login");
//		loginToggle.setImage(Images.getOrLoad("/icons/disconnect.png"));
////		loginToggle.setImage(Images.getOrLoad("/icons/connect.png"));
//		if (true) {
//			class DockingSl extends SelectionAdapter {
//				DropDownToolItem item;
//				Position pos;
//				
//				public DockingSl(DropDownToolItem item, Position pos) {
//					this.item = item;
//					this.pos = pos;
//				}
//				
//				@Override public void widgetSelected(SelectionEvent e) {
//					logger.debug("selected: "+pos+", menu visible: "+item.isMenuVisible());
//					
//					if (e.detail == SWT.ARROW)
//						return;
//					if (item.isMenuVisible())
//						return;
//					
////					logger.debug("selected: "+e);
//					switch (portalWidget.getDocking(pos)) {
//					case DOCKED:
//						portalWidget.setWidgetDockingType(pos, Docking.INVISIBLE);
//						break;
//					case UNDOCKED:
//					case INVISIBLE:
//						portalWidget.setWidgetDockingType(pos, Docking.DOCKED);
//						break;					
//					}		
//				}
//			};
//			
//			leftViewDockingDropItem = new DropDownToolItem(toolBar, false, true, SWT.RADIO, preInsertIndex++);
//			leftViewDockingDropItem.addItem("Docked", Images.APPLICATION_SIDE_CONTRACT, "Left view docking state: docked", false, Docking.DOCKED);
//			leftViewDockingDropItem.addItem("Undocked", Images.APPLICATION_SIDE_CONTRACT, "Left view docking state: undocked", false, Docking.UNDOCKED);
//			leftViewDockingDropItem.addItem("Invisible", Images.APPLICATION_SIDE_CONTRACT, "Left view docking state: invisible", false, Docking.INVISIBLE);
//			dockingToolItems.put(Position.LEFT, leftViewDockingDropItem);
//			leftViewDockingDropItem.selectItem(0, false);
////			leftViewDockingDropItem.ti.addSelectionListener(new DockingSl(leftViewDockingDropItem, Position.LEFT));
//			
//			rightViewDockingDropItem = new DropDownToolItem(toolBar, false, true, SWT.RADIO, preInsertIndex++);
//			rightViewDockingDropItem.addItem("Docked", Images.APPLICATION_SIDE_EXPAND, "Right view docking state: docked", false, Docking.DOCKED);
//			rightViewDockingDropItem.addItem("Undocked", Images.APPLICATION_SIDE_EXPAND, "Right view docking state: undocked", false, Docking.UNDOCKED);
//			rightViewDockingDropItem.addItem("Invisible", Images.APPLICATION_SIDE_EXPAND, "Right view docking state: invisible", false, Docking.INVISIBLE);
//			dockingToolItems.put(Position.RIGHT, rightViewDockingDropItem);
//			rightViewDockingDropItem.selectItem(0, false);
////			rightViewDockingDropItem.ti.addSelectionListener(new DockingSl(rightViewDockingDropItem, Position.RIGHT));
//			
//			bottomViewDockingDropItem = new DropDownToolItem(toolBar, false, true, SWT.RADIO, preInsertIndex++);
//			bottomViewDockingDropItem.addItem("Docked", Images.APPLICATION_SIDE_PUT, "Bottom view docking state: docked", false, Docking.DOCKED);
//			bottomViewDockingDropItem.addItem("Undocked", Images.APPLICATION_SIDE_PUT, "Bottom view docking state: undocked", false, Docking.UNDOCKED);
//			bottomViewDockingDropItem.addItem("Invisible", Images.APPLICATION_SIDE_PUT, "Bottom view docking state: invisible", false, Docking.INVISIBLE);
//			dockingToolItems.put(Position.BOTTOM, bottomViewDockingDropItem);
//			bottomViewDockingDropItem.selectItem(0, false);
////			bottomViewDockingDropItem.ti.addSelectionListener(new DockingSl(bottomViewDockingDropItem, Position.BOTTOM));
//		}
//		
//		else {
//		leftViewVisibleToggle = new ToolItem(toolBar, SWT.CHECK, preInsertIndex++);
//		leftViewVisibleToggle.setToolTipText("Show left view");
//		leftViewVisibleToggle.setImage(Images.getOrLoad("/icons/application_side_contract.png"));
//		
//		rightViewVisibleToggle = new ToolItem(toolBar, SWT.CHECK, preInsertIndex++);
//		rightViewVisibleToggle.setToolTipText("Show right view");
//		rightViewVisibleToggle.setImage(Images.getOrLoad("/icons/application_side_expand.png"));		
//		
//		bottomViewVisibleToggle = new ToolItem(toolBar, SWT.CHECK, preInsertIndex++);
//		bottomViewVisibleToggle.setToolTipText("Show bottom view");
//		bottomViewVisibleToggle.setImage(Images.getOrLoad("/icons/application_put.png"));
//		}
//		
//		openLocalFolderButton = new ToolItem(toolBar, SWT.PUSH, preInsertIndex++);
//		openLocalFolderButton.setToolTipText("Open local folder");
//		openLocalFolderButton.setImage(Images.getOrLoad("/icons/folder.png"));
//		
//		closeDocBtn = new ToolItem(toolBar, SWT.PUSH, preInsertIndex++);
//		closeDocBtn.setToolTipText("Close document");
//		closeDocBtn.setImage(Images.getOrLoad("/icons/cancel.png"));
//		
//		saveTranscriptButton = new ToolItem(toolBar, SWT.PUSH, preInsertIndex++);
//		saveTranscriptButton.setToolTipText("Save page");
//		saveTranscriptButton.setImage(Images.getOrLoad("/icons/disk.png"));
//
////		saveTranscriptAlwaysButton = new ToolItem(toolBar, SWT.CHECK, preInsertIndex++);
////		saveTranscriptAlwaysButton.setToolTipText("Save page always, i.e. on every change of the page - this means the page is also saved when no changes happened -> use this option with care!");
////		saveTranscriptAlwaysButton.setImage(Images.getOrLoad("/icons/disk_multiple.png"));
////		new ToolItem(toolBar, SWT.SEPARATOR, preInsertIndex++);
//		
//		reloadDocumentButton = new ToolItem(toolBar, SWT.PUSH, preInsertIndex++);
//		reloadDocumentButton.setToolTipText("Reload document");
//		reloadDocumentButton.setImage(Images.getOrLoad("/icons/refresh.gif"));
//		
//		exportDocumentButton = new ToolItem(toolBar, SWT.PUSH, preInsertIndex++);
//		exportDocumentButton.setToolTipText("Export document");
//		exportDocumentButton.setImage(Images.getOrLoad("/icons/folder_go.png"));
//		exportDocumentButton.setEnabled(false);
//		
//		exportPdfButton = new ToolItem(toolBar, SWT.PUSH, preInsertIndex++);
//		exportPdfButton.setToolTipText("Export document as PDF");
//		exportPdfButton.setImage(Images.getOrLoad("/icons/page_white_acrobat.png"));
//		exportPdfButton.setEnabled(false);
//		
//		exportTeiButton = new ToolItem(toolBar, SWT.PUSH, preInsertIndex++);
//		exportTeiButton.setToolTipText("Export document as TEI XML");
//		exportTeiButton.setImage(Images.getOrLoad("/icons/page_white_code.png"));
//		exportTeiButton.setEnabled(false);
//		
//		exportRtfButton = new ToolItem(toolBar, SWT.PUSH, preInsertIndex++);
//		exportRtfButton.setToolTipText("Export document as RTF");
//		exportRtfButton.setImage(Images.getOrLoad("/icons/page_white_word.png"));
//		exportRtfButton.setEnabled(false);
//				
////		new ToolItem(toolBar, SWT.SEPARATOR, 3);
//		
//		new ToolItem(toolBar, SWT.SEPARATOR, preInsertIndex++);
//		
//		showPrintSpaceToggle = new ToolItem(toolBar, SWT.CHECK);
//		showPrintSpaceToggle.setToolTipText("Show printspace (F1)");
//		showPrintSpaceToggle.setImage(Images.getOrLoad("/icons/show_ps_shape.png"));
//		
//		showRegionsToggle= new ToolItem(toolBar, SWT.CHECK);
//		showRegionsToggle.setToolTipText("Show regions (F2)");
//		showRegionsToggle.setImage(Images.getOrLoad("/icons/show_regions_shape.png"));
//		
//		showLinesToggle= new ToolItem(toolBar, SWT.CHECK);
//		showLinesToggle.setToolTipText("Show lines (F3)");
//		showLinesToggle.setImage(Images.getOrLoad("/icons/show_lines_shape.png"));
//		
//		showBaselinesToggle= new ToolItem(toolBar, SWT.CHECK);
//		showBaselinesToggle.setToolTipText("Show baselines (F4)");
//		showBaselinesToggle.setImage(Images.getOrLoad("/icons/show_baselines_shape.png"));
//		
//		showWordsToggle= new ToolItem(toolBar, SWT.CHECK);
//		showWordsToggle.setToolTipText("Show words (F5)");
//		showWordsToggle.setImage(Images.getOrLoad("/icons/show_word_shape.png"));
//		
//		if (TrpSettings.ENABLE_LINE_EDITOR) {
//			new ToolItem(toolBar, SWT.SEPARATOR);			
//			showLineEditorToggle = new ToolItem(toolBar, SWT.CHECK);
//			showLineEditorToggle.setImage(Images.getOrLoad("/icons/pencil.png"));
//			showLineEditorToggle.setToolTipText("Show line transcription editor");
//		}
//		
//		new ToolItem(toolBar, SWT.SEPARATOR);
//		sendBugReportButton = new ToolItem(toolBar, SWT.PUSH);
//		sendBugReportButton.setImage(Images.getOrLoad("/icons/bug.png"));
//		sendBugReportButton.setToolTipText("Send a bug report / feature request");
//		
//		toolBar.pack();
//		
//		getShell().addListener(SWT.Resize, new Listener() {
//		      @Override
//			public void handleEvent(Event e) {
//		    	  updateToolBarSize();
//		      }
//		    });
//		
//		cbItem.setControl(pagesPagingToolBar.getToolBar());
//		updateToolBarSize();
//	}
	
	void updateToolBarSize() {
//		getPagesPagingToolBar().pack(true);
		Rectangle rect = getShell().getClientArea();
		logger.debug("client area width: "+rect.width);
		toolBarGridData.widthHint = rect.width; // needed ????
		Point size1 = cb.computeSize(rect.width, SWT.DEFAULT);
		cb.setSize(size1);
		
		for (Pair<ToolBar, CoolItem> t : toolbars) {
//			Point size = pagesPagingToolBar.getToolBar().computeSize(rect.width, SWT.DEFAULT);
			Point size = t.getLeft().computeSize(SWT.DEFAULT, SWT.DEFAULT);
//			logger.debug("tb size: "+size);
			t.getLeft().setSize(size);
			
			Point s2 = t.getRight().computeSize(size.x, size.y);
			t.getRight().setSize(s2);
			
//			t.getRight().setMinimumSize(s2);
		}
		
//		Point size = pagesPagingToolBar.getToolBar().computeSize(rect.width, SWT.DEFAULT);
//		Point size = pagesPagingToolBar.getToolBar().computeSize(SWT.DEFAULT, SWT.DEFAULT);
//		logger.debug("tb size: "+size);
//		pagesPagingToolBar.getToolBar().setSize(size);
//		pagesPagingToolBar.getToolBar().pack();
//		cbItem.setSize(size);
	}
	
	private void addInternalListener() {
		// segmentation menu listener:
		menuListener = new MenuListener(this);
		
		// if 'selection' event in PortalWidget, then some dock status has changed -> adjust button selection!
		portalWidget.addListener(SWT.Selection, new Listener() {
			@Override public void handleEvent(Event event) {
				Position pos = (Position) event.data;
				Docking docking = portalWidget.getDocking(pos);
				MenuItem mi = dockingToolItems.get(pos).getItemWithData(docking);
				if (mi!=null)
					dockingToolItems.get(pos).selectItem(mi, false);
			}
		});
		
		// set docking state in PortalWidget according to button selections:
		class DockingItemSelectionListener extends SelectionAdapter {
			Position pos;
			DropDownToolItem item;
			
			public DockingItemSelectionListener(DropDownToolItem item, PortalWidget.Position pos) {
				this.item = item;
				this.pos = pos;
			}
			
			@Override public void widgetSelected(SelectionEvent e) {
				if (e.detail != SWT.ARROW) {
					logger.debug("widgetSelected: "+item.getSelected().getData());
					portalWidget.setWidgetDockingType(pos, (Docking) item.getSelected().getData());
				}
			}
		};
		leftViewDockingDropItem.ti.addSelectionListener(new DockingItemSelectionListener(leftViewDockingDropItem, PortalWidget.Position.LEFT));
		rightViewDockingDropItem.ti.addSelectionListener(new DockingItemSelectionListener(rightViewDockingDropItem, PortalWidget.Position.RIGHT));
		bottomViewDockingDropItem.ti.addSelectionListener(new DockingItemSelectionListener(bottomViewDockingDropItem, PortalWidget.Position.BOTTOM));

//		trpSets.addPropertyChangeListener(new PropertyChangeListener() {
//			@Override
//			public void propertyChange(PropertyChangeEvent evt) {
//				if (evt.getPropertyName().equals(TrpSettings.SHOW_LEFT_VIEW_PROPERTY)) {
//					portalWidget.setWidgetDockingType(PortalWidget.Position.LEFT, trpSets.isShowLeftView()?PortalWidget.Docking.DOCKED:PortalWidget.Docking.INVISIBLE);
////					portalWidget.setLeftViewVisible(trpSets.isShowLeftView());				
//				}
//				else if (evt.getPropertyName().equals(TrpSettings.SHOW_RIGHT_VIEW_PROPERTY)) {
//					portalWidget.setWidgetDockingType(PortalWidget.Position.RIGHT, trpSets.isShowRightView()?PortalWidget.Docking.DOCKED:PortalWidget.Docking.INVISIBLE);
////					portalWidget.setRightViewVisible(trpSets.isShowRightView());				
//				}				
//				else if (evt.getPropertyName().equals(TrpSettings.SHOW_BOTTOM_VIEW_PROPERTY)) {
//					portalWidget.setWidgetDockingType(PortalWidget.Position.BOTTOM, trpSets.isShowBottomView()?PortalWidget.Docking.DOCKED:PortalWidget.Docking.INVISIBLE);
////					portalWidget.setBottomViewVisible(trpSets.isShowBottomView());				
//				}
//			}
//		});		
	}
	
	private void addBindings() {
		DataBinder db = DataBinder.get();
		
		db.bindBoolBeanValueToToolItemSelection(TrpSettings.SHOW_PRINTSPACE_PROPERTY, trpSets, showPrintSpaceToggle);
		db.bindBoolBeanValueToToolItemSelection(TrpSettings.SHOW_TEXT_REGIONS_PROPERTY, trpSets, showRegionsToggle);
		db.bindBoolBeanValueToToolItemSelection(TrpSettings.SHOW_LINES_PROPERTY, trpSets, showLinesToggle);
		db.bindBoolBeanValueToToolItemSelection(TrpSettings.SHOW_BASELINES_PROPERTY, trpSets, showBaselinesToggle);
		db.bindBoolBeanValueToToolItemSelection(TrpSettings.SHOW_WORDS_PROPERTY, trpSets, showWordsToggle);
		
//		db.bindBoolBeanValueToToolItemSelection(TrpSettings.SHOW_LEFT_VIEW_PROPERTY, trpSets, leftViewVisibleToggle);
//		db.bindBoolBeanValueToToolItemSelection(TrpSettings.SHOW_RIGHT_VIEW_PROPERTY, trpSets, rightViewVisibleToggle);
//		db.bindBoolBeanValueToToolItemSelection(TrpSettings.SHOW_BOTTOM_VIEW_PROPERTY, trpSets, bottomViewVisibleToggle);
		
		if (TrpSettings.ENABLE_LINE_EDITOR)
			db.bindBoolBeanValueToToolItemSelection(TrpSettings.SHOW_LINE_EDITOR_PROPERTY, trpSets, showLineEditorToggle);
		
//		db.bindBeanToWidgetSelection(TrpSettings.SHOW_LEFT_VIEW_PROPERTY, trpSets, menu.getShowLeftViewMenuItem());
//		db.bindBeanToWidgetSelection(TrpSettings.SHOW_BOTTOM_VIEW_PROPERTY, trpSets, menu.getShowBottomViewMenuItem());
		
		db.bindBoolBeanValueToToolItemSelection(TrpSettings.RECT_MODE_PROPERTY, trpSets, canvasWidget.getToolBar().getShapeAddRectMode());
		db.bindBoolBeanValueToToolItemSelection(TrpSettings.AUTO_CREATE_PARENT_PROPERTY, trpSets, canvasWidget.getToolBar().getAutoCreateParent());
		
//		db.bindBeanToWidgetSelection(TrpSettings.ENABLE_INDEXED_STYLES, trpSets, metadataWidget.getTextStyleWidget().getEnableIndexedStylesBtn());
		
//		DataBinder.get().bindWidgetSelection(menu.getSaveTranscriptionMenuItem(), saveTranscriptButton);
//		DataBinder.get().bindBeanToWidgetSelection(TrpSettings.SHOW_BOTTOM_VIEW_PROPERTY, trpSets, menu.getShowBottomViewMenuItem());
	}
	
//	public ToolItem getLeftViewVisibleToggle() {
//		return leftViewVisibleToggle;
//	}

//	private void initAddShapeActionStuff() {
//		// add actions for shapes to draw -----------------------------------------------------------
//		CanvasToolBar tb = canvasWidget.getToolBar();
//		
//		addShapeActionCombo = new ComboToolItem(tb, SWT.DROP_DOWN | SWT.READ_ONLY, tb.indexOf(tb.getAddShape())+1);
//		addShapeActionCombo.getCombo().setToolTipText("Determines which type of shape is added");
//		
////		addShapeActionComboToolItem = new ToolItem(tb, SWT.SEPARATOR, tb.indexOf(tb.getAddShape())+1);
////		addShapeActionComboToolItem.setImage(null);
////		addShapeActionCombo = new Combo(tb, SWT.DROP_DOWN | SWT.READ_ONLY);
////		addShapeActionCombo.setToolTipText("Determines which type of shape is added");
////		addShapeActionComboToolItem.setControl(addShapeActionCombo);
////		addShapeActionComboToolItem.setWidth(addShapeActionCombo.computeSize(SWT.DEFAULT, SWT.DEFAULT).x);
//		
//		for (String segType : SegmentationTypes.TYPE_TO_SHAPES_MAP.keySet()) {
//			addShapeActionCombo.getCombo().add(segType);
//			
////			canvasWidget.addAddShapeAction(type, SegmentationTypes.getShapeToDraw(type));
////			addAddShapeAction(segType, SegmentationTypes.getShapeToDraw(segType));
//		}
//		addShapeActionCombo.getCombo().select(0);
////		tb.getLayout();
//		
//		shapeTypeCombo = new ComboToolItem(tb, SWT.DROP_DOWN | SWT.READ_ONLY, tb.indexOf(tb.getAddShape())+2);
//		shapeTypeCombo.getCombo().setToolTipText("Determines the shape with which to segment");
//		updateShapeToDrawCombo();
//		
////		shapeTypeCombo.getCombo().addSelectionListener(new SelectionAdapter() {
////			@Override
////			public void widgetSelected(SelectionEvent e) {
////				setShapeToDraw();
////			}
////		});
//		
//		// change shape to draw on selection changed:
//		addShapeActionCombo.getCombo().addSelectionListener(new SelectionAdapter() {
//			@Override
//			public void widgetSelected(SelectionEvent e) {
//				updateShapeToDrawCombo();
////				logger.debug("add shape type changed "+getSelectedAddShapeActionText()+ " shape to draw = "+getSelectedShapeActionShapeToDraw());
////				canvas.setShapeToDraw(getSelectedShapeActionShapeToDraw());
//			}
//		});
//		
//		
//		// if not in selection mode, disable add shape action combo box:
//		getCanvas().getSettings().addPropertyChangeListener(new PropertyChangeListener() {
//			@Override
//			public void propertyChange(PropertyChangeEvent evt) {
//				logger.debug("setttings changed - updating edit status!");
//				addShapeActionCombo.setEnabled(canvasWidget.getCanvas().getSettings().getMode() == CanvasMode.SELECTION);
//			}
//		});
//		
//		// -------------------------------------------------------------------------------
//		
//	}
//	
//	private void updateShapeToDrawCombo() {
//		String shapeAction = getSelectedAddShapeActionText();
//		logger.debug("updateShapeToDrawCombo, shapeAction = "+shapeAction);
//		
//		shapeTypeCombo.getCombo().removeAll();
//		for (CanvasShapeType st : SegmentationTypes.TYPE_TO_SHAPES_MAP.get(shapeAction)) {
//			shapeTypeCombo.getCombo().add(st.toString());
//		}
//		shapeTypeCombo.getCombo().select(0);
//		
////		setShapeToDraw();
//	}
	
//	private void setShapeToDraw() {
//		String shapeType = shapeTypeCombo.getCombo().getItem(shapeTypeCombo.getCombo().getSelectionIndex());
//		
//		logger.debug("setShapeToDraw: "+CanvasShapeType.fromString(shapeType));
//		canvas.getShapeEditor().setShapeToDraw(CanvasShapeType.fromString(shapeType));
//	}
	
	
	public CanvasShapeType getShapeTypeToDraw() {
		CanvasMode m = getCanvas().getSettings().getMode();
		if (m != TrpCanvasAddMode.ADD_BASELINE) {
			if (trpSets.getRectMode())
				return CanvasShapeType.RECTANGLE;
			else
				return CanvasShapeType.POLYGON;
			
		}
		else		
			return CanvasShapeType.POLYLINE;
	}
	
	/**
	 * Adds a shape action to the corresponding Combo. 
	 * If an item with the given text already exists it will not be added again and false is returned
	 */
//	private boolean addAddShapeAction(String text, Class<? extends ICanvasShape> shapeToDraw) {
//		for (String itemText : addShapeActionCombo.getItems()) {
//			if (itemText.equals(text))
//				return false;
//		}
//		
//		addShapeActionCombo.add(text);
//		shapeActionMap.put(text, shapeToDraw);
//		
//		// select first if first added:
//		if (addShapeActionCombo.getSelectionIndex() < 0) {
//			addShapeActionCombo.select(0);
//			canvasWidget.getCanvas().getShapeEditor().setShapeToDraw(shapeToDraw);
//		}
//		
//		addShapeActionComboToolItem.setWidth(addShapeActionCombo.computeSize(SWT.DEFAULT, SWT.DEFAULT).x);
//		return true;
//	}	
	
//	public String getSelectedAddShapeActionText() {
//		return addShapeActionCombo.getCombo().getText();
//	}
	
//	public Class<? extends ICanvasShape> getSelectedShapeActionShapeToDraw() {
//		return shapeActionMap.get(getSelectedAddShapeActionText());
//	}
	
//	public CCombo getAddShapeActionCombo() { return addShapeActionCombo.getCombo(); }
//	@Deprecated public void updateTreeColumnSize() { structureTreeWidget.updateTreeColumnSize(); }
//	public Tree getSegmentationElementsTree() { return treeWidget.getTree(); }
	
	public TrpMenuBar getTrpMenuBar() { return menu; }
	public StructureTreeWidget getStructureTreeWidget() { return structureTreeWidget; }
	public DocOverviewWidget getDocOverviewWidget() { return docOverviewWidget; }
	public JobOverviewWidget getJobOverviewWidget() { return jobOverviewWidget; }
	public VersionsWidget getVersionsWidget() { return versionsWidget; };
	
	public TrpCanvasWidget getCanvasWidget() { return canvasWidget; }
	public CanvasToolBar getCanvasToolBar() { return canvasWidget.getToolBar(); }
	public TrpSWTCanvas getCanvas() { 
		if (canvasWidget != null && canvasWidget.getCanvas()!=null)
			return canvasWidget.getCanvas();
		else
			return null;
	}
	
	public PagingToolBar getPagesPagingToolBar() { return this.pagesPagingToolBar; }
//	public PagingToolBar getTranscriptsPagingToolBar() { return this.transcriptsPagingToolBar; }
//	public ToolItem getUpdateIDsItem() { return structureTreeWidget.getUpdateIDsItem(); }
	
	public DropDownToolItem getTranscriptsComboItem() { return transcriptsComboItem; }
	public ToolItem getReloadTranscriptsButton() { return reloadTranscriptsButton; }
	
//	public ToolItem getShowLineEditorToggle() { return showLineEditorToggle; }
	
	public ToolItem getReloadDocumentButton() { return reloadDocumentButton; }
	public ToolItem getExportDocumentButton() { return exportDocumentButton; }
	public ToolItem getExportPdfButton() { return exportPdfButton; }
	public ToolItem getExportTeiButton() { return exportTeiButton; }
	public ToolItem getExportRtfButton() { return exportRtfButton; }
	public ToolItem getSaveTranscriptButton() { return saveTranscriptButton; }
	public ToolItem getOpenLocalFolderButton() { return openLocalFolderButton; }
	public ToolItem getCloseDocBtn() { return closeDocBtn; }
	public ToolItem getSaveTranscriptAlwaysButton() { return saveTranscriptAlwaysButton; }
	public ToolItem getLoadTranscriptInTextEditor() { return loadTranscriptInTextEditor; }
	public ToolItem getSendBugReportButton() { return sendBugReportButton; }
//	public ToolItem 
	
	@Override
	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
	}

	public LineTranscriptionWidget getLineTranscriptionWidget() {
		return lineTranscriptionWidget;
	}
	
	public WordTranscriptionWidget getWordTranscriptionWidget() {
		return wordTranscriptionWidget;
	}
	
	public Composite getTranscriptionComposite() { return transcriptionWidgetContainer; }
	
	public TabFolder getLeftTabFolder() { return this.leftTabFolder; }
//	public DocMetadataEditor getDocMetadataEditor() { return docOverviewWidget.getDocMetadataEditor(); }
	
	public ATranscriptionWidget.Type getSelectedTranscriptionType() {
		ATranscriptionWidget widget = getSelectedTranscriptionWidget();
		if (widget!=null) {
			return widget.getType();
		}
		return null;
	}
	
	public ATranscriptionWidget getSelectedTranscriptionWidget() {
		if (transcriptionWidgetContainer.getChildren().length>0 && transcriptionWidgetContainer.getChildren()[0] instanceof ATranscriptionWidget) {
			return (ATranscriptionWidget) transcriptionWidgetContainer.getChildren()[0];	
		}
		else
			return null;

//		int i = transcriptionTabFolder.getSelectionIndex();
//		if (i!=-1) {
//			if (transcriptionTabFolder.getItem(i).getControl() instanceof ATranscriptionWidget) {
//				return (ATranscriptionWidget) transcriptionTabFolder.getItem(i).getControl();
//			}
//		}
//		return null;
	}

	public TrpSettings getTrpSets() {
		return trpSets;
	}
	
	public ToolItem getLoginToggle() { return loginToggle; }
	
	public PageMetadataWidget getMetadataWidget() { return metadataWidget; }
	public TrpVirtualKeyboards getVkeyboards() { return vkeyboards; }
	public ToolsWidget getLaWidget() { return laWidget; }
		
	public void updateLoginInfo(boolean loggedIn, String username, String server) {
		if (loggedIn) {
			docOverviewWidget.getUsernameLabel().setText("Logged in as: "+username);
			docOverviewWidget.getServerLabel().setText("Server: "+server);

			loginToggle.setToolTipText("Logout "+username);
//			loginToggle.setSelection(true);
			loginToggle.setImage(Images.getOrLoad("/icons/connect.png"));
		} else {
			docOverviewWidget.getUsernameLabel().setText("Not logged in");
			docOverviewWidget.getServerLabel().setText("");
			loginToggle.setToolTipText("Login");
//			loginToggle.setSelection(false);
			loginToggle.setImage(Images.getOrLoad("/icons/disconnect.png"));
		}
		
		docOverviewWidget.getUsernameLabel().pack();
		docOverviewWidget.getServerLabel().pack();
		
		
		loginToggle.setSelection(loggedIn);
	}

	public void center() {
		Monitor primary = Display.getCurrent().getPrimaryMonitor();
		Rectangle bounds = primary.getBounds();
		Rectangle rect = getShell().getBounds();
		int x = bounds.x + (bounds.width - rect.width) / 2;
		int y = bounds.y + (bounds.height - rect.height) / 2;

		getShell().setLocation(x, y);
	}


}
